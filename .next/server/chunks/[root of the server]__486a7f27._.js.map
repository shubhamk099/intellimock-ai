{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///home/shubham/Codeplay/intellimock-ai/firebase/admin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from \"firebase-admin/app\";\nimport { getAuth } from \"firebase-admin/auth\";\nimport { getFirestore } from \"firebase-admin/firestore\";\n\n// Initialize Firebase Admin SDK\nfunction initFirebaseAdmin() {\n  const apps = getApps();\n\n  if (!apps.length) {\n    initializeApp({\n      credential: cert({\n        projectId: process.env.FIREBASE_PROJECT_ID,\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n        // Replace newlines in the private key\n        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\n      }),\n    });\n  }\n\n  return {\n    auth: getAuth(),\n    db: getFirestore(),\n  };\n}\n\nexport const { auth, db } = initFirebaseAdmin();\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;;AAEA,gCAAgC;AAChC,SAAS;IACP,MAAM,OAAO,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD;IAEnB,IAAI,CAAC,KAAK,MAAM,EAAE;QAChB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD,EAAE;YACZ,YAAY,CAAA,GAAA,gJAAA,CAAA,OAAI,AAAD,EAAE;gBACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,sCAAsC;gBACtC,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YAChE;QACF;IACF;IAEA,OAAO;QACL,MAAM,CAAA,GAAA,kJAAA,CAAA,UAAO,AAAD;QACZ,IAAI,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IACjB;AACF;AAEO,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///home/shubham/Codeplay/intellimock-ai/constants/index.ts"],"sourcesContent":["import { CreateAssistantDTO } from \"@vapi-ai/web/dist/api\";\nimport { z } from \"zod\";\n\nexport const mappings = {\n  \"react.js\": \"react\",\n  reactjs: \"react\",\n  react: \"react\",\n  \"next.js\": \"nextjs\",\n  nextjs: \"nextjs\",\n  next: \"nextjs\",\n  \"vue.js\": \"vuejs\",\n  vuejs: \"vuejs\",\n  vue: \"vuejs\",\n  \"express.js\": \"express\",\n  expressjs: \"express\",\n  express: \"express\",\n  \"node.js\": \"nodejs\",\n  nodejs: \"nodejs\",\n  node: \"nodejs\",\n  mongodb: \"mongodb\",\n  mongo: \"mongodb\",\n  mongoose: \"mongoose\",\n  mysql: \"mysql\",\n  postgresql: \"postgresql\",\n  sqlite: \"sqlite\",\n  firebase: \"firebase\",\n  docker: \"docker\",\n  kubernetes: \"kubernetes\",\n  aws: \"aws\",\n  azure: \"azure\",\n  gcp: \"gcp\",\n  digitalocean: \"digitalocean\",\n  heroku: \"heroku\",\n  photoshop: \"photoshop\",\n  \"adobe photoshop\": \"photoshop\",\n  html5: \"html5\",\n  html: \"html5\",\n  css3: \"css3\",\n  css: \"css3\",\n  sass: \"sass\",\n  scss: \"sass\",\n  less: \"less\",\n  tailwindcss: \"tailwindcss\",\n  tailwind: \"tailwindcss\",\n  bootstrap: \"bootstrap\",\n  jquery: \"jquery\",\n  typescript: \"typescript\",\n  ts: \"typescript\",\n  javascript: \"javascript\",\n  js: \"javascript\",\n  \"angular.js\": \"angular\",\n  angularjs: \"angular\",\n  angular: \"angular\",\n  \"ember.js\": \"ember\",\n  emberjs: \"ember\",\n  ember: \"ember\",\n  \"backbone.js\": \"backbone\",\n  backbonejs: \"backbone\",\n  backbone: \"backbone\",\n  nestjs: \"nestjs\",\n  graphql: \"graphql\",\n  \"graph ql\": \"graphql\",\n  apollo: \"apollo\",\n  webpack: \"webpack\",\n  babel: \"babel\",\n  \"rollup.js\": \"rollup\",\n  rollupjs: \"rollup\",\n  rollup: \"rollup\",\n  \"parcel.js\": \"parcel\",\n  parceljs: \"parcel\",\n  npm: \"npm\",\n  yarn: \"yarn\",\n  git: \"git\",\n  github: \"github\",\n  gitlab: \"gitlab\",\n  bitbucket: \"bitbucket\",\n  figma: \"figma\",\n  prisma: \"prisma\",\n  redux: \"redux\",\n  flux: \"flux\",\n  redis: \"redis\",\n  selenium: \"selenium\",\n  cypress: \"cypress\",\n  jest: \"jest\",\n  mocha: \"mocha\",\n  chai: \"chai\",\n  karma: \"karma\",\n  vuex: \"vuex\",\n  \"nuxt.js\": \"nuxt\",\n  nuxtjs: \"nuxt\",\n  nuxt: \"nuxt\",\n  strapi: \"strapi\",\n  wordpress: \"wordpress\",\n  contentful: \"contentful\",\n  netlify: \"netlify\",\n  vercel: \"vercel\",\n  \"aws amplify\": \"amplify\",\n};\n\nexport const interviewer: CreateAssistantDTO = {\n  name: \"Interviewer\",\n  firstMessage:\n    \"Hello! Thank you for taking the time to speak with me today. I'm excited to learn more about you and your experience.\",\n  transcriber: {\n    provider: \"deepgram\",\n    model: \"nova-2\",\n    language: \"en\",\n  },\n  voice: {\n    provider: \"11labs\",\n    voiceId: \"sarah\",\n    stability: 0.4,\n    similarityBoost: 0.8,\n    speed: 0.9,\n    style: 0.5,\n    useSpeakerBoost: true,\n  },\n  model: {\n    provider: \"openai\",\n    model: \"gpt-4\",\n    messages: [\n      {\n        role: \"system\",\n        content: `You are a professional job interviewer conducting a real-time voice interview with a candidate. Your goal is to assess their qualifications, motivation, and fit for the role.\n\nInterview Guidelines:\nFollow the structured question flow:\n{{questions}}\n\nEngage naturally & react appropriately:\nListen actively to responses and acknowledge them before moving forward.\nAsk brief follow-up questions if a response is vague or requires more detail.\nKeep the conversation flowing smoothly while maintaining control.\nBe professional, yet warm and welcoming:\n\nUse official yet friendly language.\nKeep responses concise and to the point (like in a real voice interview).\nAvoid robotic phrasing—sound natural and conversational.\nAnswer the candidate’s questions professionally:\n\nIf asked about the role, company, or expectations, provide a clear and relevant answer.\nIf unsure, redirect the candidate to HR for more details.\n\nConclude the interview properly:\nThank the candidate for their time.\nInform them that the company will reach out soon with feedback.\nEnd the conversation on a polite and positive note.\n\n\n- Be sure to be professional and polite.\n- Keep all your responses short and simple. Use official language, but be kind and welcoming.\n- This is a voice conversation, so keep your responses short, like in a real conversation. Don't ramble for too long.`,\n      },\n    ],\n  },\n};\n\nexport const feedbackSchema = z.object({\n  totalScore: z.number(),\n  categoryScores: z.tuple([\n    z.object({\n      name: z.literal(\"Communication Skills\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Technical Knowledge\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Problem Solving\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Cultural Fit\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Confidence and Clarity\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n  ]),\n  strengths: z.array(z.string()),\n  areasForImprovement: z.array(z.string()),\n  finalAssessment: z.string(),\n});\n\nexport const interviewCovers = [\n  \"/adobe.png\",\n  \"/amazon.png\",\n  \"/facebook.png\",\n  \"/hostinger.png\",\n  \"/pinterest.png\",\n  \"/quora.png\",\n  \"/reddit.png\",\n  \"/skype.png\",\n  \"/spotify.png\",\n  \"/telegram.png\",\n  \"/tiktok.png\",\n  \"/yahoo.png\",\n];\n\nexport const dummyInterviews: Interview[] = [\n  {\n    id: \"1\",\n    userId: \"user1\",\n    role: \"Frontend Developer\",\n    type: \"Technical\",\n    techstack: [\"React\", \"TypeScript\", \"Next.js\", \"Tailwind CSS\"],\n    level: \"Junior\",\n    questions: [\"What is React?\"],\n    finalized: false,\n    createdAt: \"2024-03-15T10:00:00Z\",\n  },\n  {\n    id: \"2\",\n    userId: \"user1\",\n    role: \"Full Stack Developer\",\n    type: \"Mixed\",\n    techstack: [\"Node.js\", \"Express\", \"MongoDB\", \"React\"],\n    level: \"Senior\",\n    questions: [\"What is Node.js?\"],\n    finalized: false,\n    createdAt: \"2024-03-14T15:30:00Z\",\n  },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///home/shubham/Codeplay/intellimock-ai/lib/utils.ts"],"sourcesContent":["import { interviewCovers, mappings } from \"@/constants\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst techIconBaseURL = \"https://cdn.jsdelivr.net/gh/devicons/devicon/icons\";\n\nconst normalizeTechName = (tech: string) => {\n  const key = tech.toLowerCase().replace(/\\.js$/, \"\").replace(/\\s+/g, \"\");\n  return mappings[key as keyof typeof mappings];\n};\n\nconst checkIconExists = async (url: string) => {\n  try {\n    const response = await fetch(url, { method: \"HEAD\" });\n    return response.ok; // Returns true if the icon exists\n  } catch {\n    return false;\n  }\n};\n\nexport const getTechLogos = async (techArray: string[]) => {\n  const logoURLs = techArray.map((tech) => {\n    const normalized = normalizeTechName(tech);\n    return {\n      tech,\n      url: `${techIconBaseURL}/${normalized}/${normalized}-original.svg`,\n    };\n  });\n\n  const results = await Promise.all(\n    logoURLs.map(async ({ tech, url }) => ({\n      tech,\n      url: (await checkIconExists(url)) ? url : \"/tech.svg\",\n    }))\n  );\n\n  return results;\n};\n\nexport const getRandomInterviewCover = () => {\n  const randomIndex = Math.floor(Math.random() * interviewCovers.length);\n  return `/covers${interviewCovers[randomIndex]}`;\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,uIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEA,MAAM,kBAAkB;AAExB,MAAM,oBAAoB,CAAC;IACzB,MAAM,MAAM,KAAK,WAAW,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ;IACpE,OAAO,oHAAA,CAAA,WAAQ,CAAC,IAA6B;AAC/C;AAEA,MAAM,kBAAkB,OAAO;IAC7B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAAE,QAAQ;QAAO;QACnD,OAAO,SAAS,EAAE,EAAE,kCAAkC;IACxD,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,MAAM,eAAe,OAAO;IACjC,MAAM,WAAW,UAAU,GAAG,CAAC,CAAC;QAC9B,MAAM,aAAa,kBAAkB;QACrC,OAAO;YACL;YACA,KAAK,GAAG,gBAAgB,CAAC,EAAE,WAAW,CAAC,EAAE,WAAW,aAAa,CAAC;QACpE;IACF;IAEA,MAAM,UAAU,MAAM,QAAQ,GAAG,CAC/B,SAAS,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,GAAK,CAAC;YACrC;YACA,KAAK,AAAC,MAAM,gBAAgB,OAAQ,MAAM;QAC5C,CAAC;IAGH,OAAO;AACT;AAEO,MAAM,0BAA0B;IACrC,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,oHAAA,CAAA,kBAAe,CAAC,MAAM;IACrE,OAAO,CAAC,OAAO,EAAE,oHAAA,CAAA,kBAAe,CAAC,YAAY,EAAE;AACjD","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///home/shubham/Codeplay/intellimock-ai/app/api/vapi/generate/route.ts"],"sourcesContent":["import { generateText } from \"ai\";\nimport { google } from \"@ai-sdk/google\";\n\nimport { db } from \"@/firebase/admin\";\nimport { getRandomInterviewCover } from \"@/lib/utils\";\n\nexport async function POST(request: Request) {\n  const { type, role, level, techstack, amount, userid } = await request.json();\n\n  try {\n    const { text: questions } = await generateText({\n      model: google(\"gemini-2.0-flash-001\"),\n      prompt: `Prepare questions for a job interview.\n        The job role is ${role}.\n        The job experience level is ${level}.\n        The tech stack used in the job is: ${techstack}.\n        The focus between behavioural and technical questions should lean towards: ${type}.\n        The amount of questions required is: ${amount}.\n        Please return only the questions, without any additional text.\n        The questions are going to be read by a voice assistant so do not use \"/\" or \"*\" or any other special characters which might break the voice assistant.\n        Return the questions formatted like this:\n        [\"Question 1\", \"Question 2\", \"Question 3\"]\n        \n        Thank you! <3\n    `,\n    });\n\n    const interview = {\n      role: role,\n      type: type,\n      level: level,\n      techstack: techstack.split(\",\"),\n      questions: JSON.parse(questions),\n      userId: userid,\n      finalized: true,\n      coverImage: getRandomInterviewCover(),\n      createdAt: new Date().toISOString(),\n    };\n\n    await db.collection(\"interviews\").add(interview);\n\n    return Response.json({ success: true }, { status: 200 });\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return Response.json({ success: false, error: error }, { status: 500 });\n  }\n}\n\nexport async function GET() {\n  return Response.json({ success: true, data: \"Thank you!\" }, { status: 200 });\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AACA;;;;;;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;IAE3E,IAAI;QACF,MAAM,EAAE,MAAM,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,sJAAA,CAAA,eAAY,AAAD,EAAE;YAC7C,OAAO,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE;YACd,QAAQ,CAAC;wBACS,EAAE,KAAK;oCACK,EAAE,MAAM;2CACD,EAAE,UAAU;mFAC4B,EAAE,KAAK;6CAC7C,EAAE,OAAO;;;;;;;IAOlD,CAAC;QACD;QAEA,MAAM,YAAY;YAChB,MAAM;YACN,MAAM;YACN,OAAO;YACP,WAAW,UAAU,KAAK,CAAC;YAC3B,WAAW,KAAK,KAAK,CAAC;YACtB,QAAQ;YACR,WAAW;YACX,YAAY,CAAA,GAAA,8GAAA,CAAA,0BAAuB,AAAD;YAClC,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,MAAM,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC,cAAc,GAAG,CAAC;QAEtC,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;QAAK,GAAG;YAAE,QAAQ;QAAI;IACxD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAM,GAAG;YAAE,QAAQ;QAAI;IACvE;AACF;AAEO,eAAe;IACpB,OAAO,SAAS,IAAI,CAAC;QAAE,SAAS;QAAM,MAAM;IAAa,GAAG;QAAE,QAAQ;IAAI;AAC5E","debugId":null}}]
}